@import "utils";


@function splitByComma($value, $args...) {
  $separator: ", ";
  //$stringWihoutComma: str-replace($value, $separator, "");
  $split: explode($value, $separator);
  @return $split;
}
@function removeAndSeparator($value, $args...) {
  $result: str-replace($value, " and ", "");
  @return $result;
}
@function splitByAnd($value, $args...) {
  // @debug type-of($value);
  // @debug $value;
  $separator: " and ";
  //$stringWihoutComma: str-replace($value, $separator, "");
  $split: explode($value, $separator);
  @return $split;
}
@function mapRetina($value, $args...) {
  $result: mq-get-retina-query($value);
  @return $result;
}
@function parseQuery($value, $args...) {
  $result: "";
  $parsed-breakpoint: mq-get-breakpoint($value);
  @if ($parsed-breakpoint) {
    $result: $parsed-breakpoint;
  } @else {
    $result: $value;
  }
  @return $result;
}




@function getRetinaQueries($value, $args...) {
  //$stringWihoutRetina: str-replace($value, "retina", "");
  //@debug $stringWihoutRetina;
  //$retinaQueries: _map($value, splitByAnd);
  //@debug $retinaQueries;
  $split: explode($value, " and ");
  $removeRetina: base-difference($split, "retina");
  $parsedQueries: mapParseQuery($removeRetina);
  $combinedParsedQueries: list-join($parsedQueries, " and ");

  $retinaParsedQueries: mq-get-retina-query($combinedParsedQueries);

  //@debug $split;
  @return $retinaParsedQueries;
}
@function getAndQueries($value, $args...) {
  //$stringWihoutRetina: str-replace($value, "retina", "");
  //@debug $stringWihoutRetina;
  //$retinaQueries: _map($value, splitByAnd);
  //@debug $retinaQueries;
  $split: explode($value, " and ");
  $parsedQueries: mapParseQuery($split);
  
  $andParsedQueries: list-join($parsedQueries, " and ");

  //@debug $split;
  @return $andParsedQueries;
}
@function isContainRetina($value) {
  $result: if(str-index($value, "retina"), true, false);
  @return $result;
}

@function getCommaQueries($value) {
  $commaQueries: mapSplitByComma($value);
  //@debug $commaQueries;
  @return $commaQueries;
}



@function mq-parse($raw-queries) {
  //@debug $raw-queries;
  $mq-list: ();

  @each $raw-query in $raw-queries {
    //@debug $raw-query;
    $commaQueries: splitByComma($raw-query);
    //@debug $commaQueries;
    //@debug $commaQueries;
    @each $commaList in $commaQueries {

      //@debug $commaList;
      
      @each $commaQuery in $commaList {
        $breakpoint: "";
        @if ( isContainRetina($commaQuery)) {
          $retinaQueries: getRetinaQueries($commaQuery);
          
          $breakpoint: $retinaQueries;
    
        } @else {
          
          @if (isContainAnd($commaQuery)) {
            $andQueries: getAndQueries($commaQuery);
            $breakpoint: $andQueries;
          } @else {
            
            @if (mq-get-breakpoint($commaQuery)) {
              $breakpoint: mq-get-breakpoint($commaQuery)
            }@else {
              $breakpoint: $commaQuery;
            }
            

          }

        }
        //@debug $breakpoint;
        $mq-list: append($mq-list, $breakpoint, comma);
      }
    
    }
  }

  // @each $raw-query in $raw-queries {
  //   $breakpoint: "";
  //   @if (mq-get-breakpoint($raw-query)) {
  //     $breakpoint: mq-get-breakpoint($raw-query);
  //   } @else {
      
  //     @if (is-contain-and($raw-query) or is-retina($raw-query)) {
  //       @if (is-retina($raw-query)) {
  //         $query-name: remove-retina-suffix($raw-query);
  //         $parsed-query: mq-parse-query($query-name);
  //         $breakpoint: mq-get-retina-query($parsed-query);
  //       } @else {
          
  //         $breakpoint: mq-parse-query($raw-query);
  //       }
  //     } @else {
  //       $breakpoint: $raw-query;
  //     }
  //   }
  //   //@debug $breakpoint;

  //   $mq-list: append($mq-list, $breakpoint, comma);
  // }

  //  @debug $mq-list;  
    

//  $retina-mq-list: ();


// $merged-list: join($mq-list, $retina-mq-list, comma);
  
  //@debug $merged-list;
  $flatten-list: flatten($mq-list);
  $string-mq: list-join($flatten-list, ", ");
  
  @return $string-mq;
}
