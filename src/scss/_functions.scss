
@function str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }

  @return $string;
}

@function rename($value) {
  $renamed-value: $value;
  $renamed-value: str-replace($renamed-value, '>', 'greater-');
  $renamed-value: str-replace($renamed-value, '<', 'less-');
  $renamed-value: str-replace($renamed-value, '=', 'equal-');
  $renamed-value: str-replace($renamed-value, '!', 'not-');
  @return $renamed-value;
}

@function stringRatio($value) {
  $stringifiedRatio: str-replace(toString($value), " ", "");
  @return $stringifiedRatio;
}


@function toString($value) {
  @return $value + unquote("");
}

@function str-split($string, $separator) {
  // empty array/list
  $split-arr: ();
  // first index of separator in string
  $index : str-index($string, $separator);
  // loop through string
  @while $index != null {
      // get the substring from the first character to the separator
      $item: str-slice($string, 1, $index - 1);
      // push item to array
      $split-arr: append($split-arr, $item);
      // remove item and separator from string
      $string: str-slice($string, $index + 1);
      // find new index of separator
      $index : str-index($string, $separator);
  }
  // add the remaining string to list (the last item)
  $split-arr: append($split-arr, $string);

  @return $split-arr;
}

@function is-contain-space($value) {
  
  $string: toString($value);
   
  @if (str-index($string, " ") != null) {
    @return true;
  } @else {
    @return false;
  }
}

@function is-contain-and($value) {
  $string: toString($value);
   
  @if (str-index($string, " and ") != null) {
    @return true;
  } @else {
    @return false;
  }
}

@function mq-and-keywords($value) {
  $dirty-keywords: str-split($value, " and ");
  
  $keywords: ();
  @each $dirty-keyword in $dirty-keywords {
    $keyword: str-replace($dirty-keyword, "and ", "");
    $keywords: append($keywords, $keyword);
  }
  @return $keywords; 
}

@function mq-parse($keywords) {
  //@warn $keywords;
  $mq-list: ();
  @each $keyword in $keywords {
        
    @if (mq-get-breakpoint($keyword)) {
      $mq-list: append($mq-list, mq-get-breakpoint($keyword), comma);
    } @else {
      
      @if (is-contain-and($keyword)) {
        $raw-keywords: mq-and-keywords($keyword);
        //$parsed-keywords: ();
        $string-mq: "";
        @each $raw-keyword in $raw-keywords {
          $index: index($raw-keywords, $raw-keyword);
          
          @if (mq-get-breakpoint($raw-keyword)) {
            
            $parsed-keyword: mq-get-breakpoint($raw-keyword);
            //$parsed-keywords: append($parsed-keywords, $parsed-keyword);
            @if ($index == 1) {
              $string-mq: $string-mq + $parsed-keyword;
            } @else {
              $string-mq: $string-mq + " and " + $parsed-keyword;
            }
          } @else {
            //$parsed-keywords: append($parsed-keywords, $raw-keyword);
            @if ($index == 1) {
              $string-mq: $string-mq + $raw-keyword;
            } @else {
              $string-mq: $string-mq + " and " + $raw-keyword;
            }
          }
        }
        
        //@return $string-mq;
        $mq-list: append($mq-list, $string-mq, comma);
      } @else {
        //@return $keyword;
        $mq-list: append($mq-list, $keyword, comma);
      }
    } 
  }
  @debug $mq-list;
  @return $mq-list;
}


@function mq-get-breakpoint($name, $breakpoints: $mq-breakpoints) {
  @if map-has-key($breakpoints, $name) {
      @return map-get($breakpoints, $name);
  } @else {
    //@warn "Breakpoint #{$name} wasn't found in $breakpoints.";
    @return false;
  }
}